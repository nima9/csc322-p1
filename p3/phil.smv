--
-- CSC 322 Project 3
--
-- Name: Alexander Lambert 
-- Vnum: V00956639
--
-- Name: Carter Cranston
-- Vnum: V01000607
--
-- Name: Nima Mohajeri 
-- Vnum: V00857216
--
--
MODULE main
  
VAR
  sushi : {0,1,2,3,4}; -- who is allowed to be holding chopsticks
  chopsticks : array 0..4 of {nobody,0,1,2,3,4}; -- who holds the chopstick.
  --
  -- Philosopher i has chopstick i on left and chopstick
  -- (i + 1) mod 5 on right
  --
  p0 : process philosopher(0,chopsticks[0],chopsticks[1],sushi);
  p1 : process philosopher(1,chopsticks[1],chopsticks[2],sushi);
  p2 : process philosopher(2,chopsticks[2],chopsticks[3],sushi);
  p3 : process philosopher(3,chopsticks[3],chopsticks[4],sushi);
  p4 : process philosopher(4,chopsticks[4],chopsticks[0],sushi);
  
ASSIGN
  init(sushi) := 0; -- the first philosopher to be polled is p0
  --
  -- Initially, all chopsticks are free
  --
  init(chopsticks[0]) := nobody;
  init(chopsticks[1]) := nobody;
  init(chopsticks[2]) := nobody;
  init(chopsticks[3]) := nobody;
  init(chopsticks[4]) := nobody;
    
MODULE philosopher(i,left,right,sushi)
  
VAR
  state : {thinking, hungry, eating, done};
  
DEFINE
  --
  -- These are just abbreviations, not state variables
  --
  gotleft := (left=i);
  gotright := (right=i);
  leftfree := (left=nobody);
  rightfree := (right=nobody);
  polled := (sushi=i); 
    
ASSIGN
  init(state) := thinking;

  next(left)  := case
    (state = done) : nobody; -- drop chopstick
    --
    -- if hungry and allowed to eat, take left chopstick
    --
    ((state=hungry) & leftfree & (rightfree | gotright) & polled) : i;
    TRUE : left;
  esac;

  next(right) := case
    (state = done) : nobody; -- drop chopstick
    --
    -- if hungry and allowed to eat, take right chopstick
    --
    ((state=hungry) & gotleft & rightfree & polled) : i; 
    TRUE : right;
  esac;

  next(state) := case
    (state=thinking) : {thinking, hungry};
    (state=hungry) & gotleft & gotright : eating;
    (state=hungry) : hungry; -- don't have chopsticks
    (state=eating) : {eating, done};
    (state=done) : thinking;
    TRUE : state;
  esac;

  next(sushi) := case
  -- if the philosopher doesn't eat, they must pass the sushi to the next philosopher
    (sushi=i & (state=eating | state=hungry)) : sushi;
    sushi=i : (sushi+1) mod 5;
    TRUE : sushi;
  esac;

-- add fairness constraints here
FAIRNESS (running) -- every philosopher must get opportunities where eating is possible
FAIRNESS !(state = eating) -- every philosopher must think sometimes

-- add specifications here 

-- safety
SPEC AG ((state = eating) -> (gotleft)&(gotright))

-- liveness
SPEC AG ((state = hungry) -> AF (state = eating))